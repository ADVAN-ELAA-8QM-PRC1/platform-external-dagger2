package test;

import dagger.MembersInjector;
import dagger.internal.DoubleCheckLazy;
import javax.annotation.Generated;
import javax.inject.Provider;

@Generated("dagger.internal.codegen.ComponentProcessor")
public final class InjectedThing_MembersInjector implements MembersInjector<InjectedThing> {
  private final Provider<Byte> boxedBypeAndPrimitiveByteAndByteProvider;
  private final Provider<Character> boxedCharAndPrimitiveCharAndCharProvider;
  private final Provider<Short> boxedShortAndPrimitiveShortAndShortProvider;
  private final Provider<Integer> boxedIntAndPrimitiveIntAndIntProvider;
  private final Provider<Long> boxedLongAndPrimitiveLongAndLongProvider;
  private final Provider<Boolean> boxedBooleanAndPrimitiveBooleanAndBooleanProvider;
  private final Provider<Float> boxedFloatAndPrimitiveFloatAndFloatProvider;
  private final Provider<Double> boxedDoubleAndPrimitiveDoubleAndDoubleProvider;
  private final Provider<byte[]> byteArrayProvider;
  private final Provider<char[]> charArrayProvider;
  private final Provider<short[]> shortArrayProvider;
  private final Provider<int[]> intArrayProvider;
  private final Provider<long[]> longArrayProvider;
  private final Provider<boolean[]> booleanArrayProvider;
  private final Provider<float[]> floatArrayAndLazyProvider;
  private final Provider<double[]> doubleArrayProvider;
  private final Provider<Thing> thingProvider;
  private final MembersInjector<Thing> thingMembersInjector;

  public InjectedThing_MembersInjector(Provider<Byte> boxedBypeAndPrimitiveByteAndByteProvider, Provider<Character> boxedCharAndPrimitiveCharAndCharProvider, Provider<Short> boxedShortAndPrimitiveShortAndShortProvider, Provider<Integer> boxedIntAndPrimitiveIntAndIntProvider, Provider<Long> boxedLongAndPrimitiveLongAndLongProvider, Provider<Boolean> boxedBooleanAndPrimitiveBooleanAndBooleanProvider, Provider<Float> boxedFloatAndPrimitiveFloatAndFloatProvider, Provider<Double> boxedDoubleAndPrimitiveDoubleAndDoubleProvider, Provider<byte[]> byteArrayProvider, Provider<char[]> charArrayProvider, Provider<short[]> shortArrayProvider, Provider<int[]> intArrayProvider, Provider<long[]> longArrayProvider, Provider<boolean[]> booleanArrayProvider, Provider<float[]> floatArrayAndLazyProvider, Provider<double[]> doubleArrayProvider, Provider<Thing> thingProvider, MembersInjector<Thing> thingMembersInjector) {  
    assert boxedBypeAndPrimitiveByteAndByteProvider != null;
    this.boxedBypeAndPrimitiveByteAndByteProvider = boxedBypeAndPrimitiveByteAndByteProvider;
    assert boxedCharAndPrimitiveCharAndCharProvider != null;
    this.boxedCharAndPrimitiveCharAndCharProvider = boxedCharAndPrimitiveCharAndCharProvider;
    assert boxedShortAndPrimitiveShortAndShortProvider != null;
    this.boxedShortAndPrimitiveShortAndShortProvider = boxedShortAndPrimitiveShortAndShortProvider;
    assert boxedIntAndPrimitiveIntAndIntProvider != null;
    this.boxedIntAndPrimitiveIntAndIntProvider = boxedIntAndPrimitiveIntAndIntProvider;
    assert boxedLongAndPrimitiveLongAndLongProvider != null;
    this.boxedLongAndPrimitiveLongAndLongProvider = boxedLongAndPrimitiveLongAndLongProvider;
    assert boxedBooleanAndPrimitiveBooleanAndBooleanProvider != null;
    this.boxedBooleanAndPrimitiveBooleanAndBooleanProvider = boxedBooleanAndPrimitiveBooleanAndBooleanProvider;
    assert boxedFloatAndPrimitiveFloatAndFloatProvider != null;
    this.boxedFloatAndPrimitiveFloatAndFloatProvider = boxedFloatAndPrimitiveFloatAndFloatProvider;
    assert boxedDoubleAndPrimitiveDoubleAndDoubleProvider != null;
    this.boxedDoubleAndPrimitiveDoubleAndDoubleProvider = boxedDoubleAndPrimitiveDoubleAndDoubleProvider;
    assert byteArrayProvider != null;
    this.byteArrayProvider = byteArrayProvider;
    assert charArrayProvider != null;
    this.charArrayProvider = charArrayProvider;
    assert shortArrayProvider != null;
    this.shortArrayProvider = shortArrayProvider;
    assert intArrayProvider != null;
    this.intArrayProvider = intArrayProvider;
    assert longArrayProvider != null;
    this.longArrayProvider = longArrayProvider;
    assert booleanArrayProvider != null;
    this.booleanArrayProvider = booleanArrayProvider;
    assert floatArrayAndLazyProvider != null;
    this.floatArrayAndLazyProvider = floatArrayAndLazyProvider;
    assert doubleArrayProvider != null;
    this.doubleArrayProvider = doubleArrayProvider;
    assert thingProvider != null;
    this.thingProvider = thingProvider;
    assert thingMembersInjector != null;
    this.thingMembersInjector = thingMembersInjector;
  }

  @Override
  public void injectMembers(InjectedThing instance) {  
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.primitiveByte = boxedBypeAndPrimitiveByteAndByteProvider.get();
    instance.primitiveChar = boxedCharAndPrimitiveCharAndCharProvider.get();
    instance.primitiveShort = boxedShortAndPrimitiveShortAndShortProvider.get();
    instance.primitiveInt = boxedIntAndPrimitiveIntAndIntProvider.get();
    instance.primitiveLong = boxedLongAndPrimitiveLongAndLongProvider.get();
    instance.primitiveBoolean = boxedBooleanAndPrimitiveBooleanAndBooleanProvider.get();
    instance.primitiveFloat = boxedFloatAndPrimitiveFloatAndFloatProvider.get();
    instance.primitiveDouble = boxedDoubleAndPrimitiveDoubleAndDoubleProvider.get();
    instance.byteProvider = boxedBypeAndPrimitiveByteAndByteProvider;
    instance.charProvider = boxedCharAndPrimitiveCharAndCharProvider;
    instance.shortProvider = boxedShortAndPrimitiveShortAndShortProvider;
    instance.intProvider = boxedIntAndPrimitiveIntAndIntProvider;
    instance.longProvider = boxedLongAndPrimitiveLongAndLongProvider;
    instance.booleanProvider = boxedBooleanAndPrimitiveBooleanAndBooleanProvider;
    instance.floatProvider = boxedFloatAndPrimitiveFloatAndFloatProvider;
    instance.doubleProvider = boxedDoubleAndPrimitiveDoubleAndDoubleProvider;
    instance.lazyByte = DoubleCheckLazy.create(boxedBypeAndPrimitiveByteAndByteProvider);
    instance.lazyChar = DoubleCheckLazy.create(boxedCharAndPrimitiveCharAndCharProvider);
    instance.lazyShort = DoubleCheckLazy.create(boxedShortAndPrimitiveShortAndShortProvider);
    instance.lazyInt = DoubleCheckLazy.create(boxedIntAndPrimitiveIntAndIntProvider);
    instance.lazyLong = DoubleCheckLazy.create(boxedLongAndPrimitiveLongAndLongProvider);
    instance.lazyBoolean = DoubleCheckLazy.create(boxedBooleanAndPrimitiveBooleanAndBooleanProvider);
    instance.lazyFloat = DoubleCheckLazy.create(boxedFloatAndPrimitiveFloatAndFloatProvider);
    instance.lazyDouble = DoubleCheckLazy.create(boxedDoubleAndPrimitiveDoubleAndDoubleProvider);
    instance.boxedBype = boxedBypeAndPrimitiveByteAndByteProvider.get();
    instance.boxedChar = boxedCharAndPrimitiveCharAndCharProvider.get();
    instance.boxedShort = boxedShortAndPrimitiveShortAndShortProvider.get();
    instance.boxedInt = boxedIntAndPrimitiveIntAndIntProvider.get();
    instance.boxedLong = boxedLongAndPrimitiveLongAndLongProvider.get();
    instance.boxedBoolean = boxedBooleanAndPrimitiveBooleanAndBooleanProvider.get();
    instance.boxedFloat = boxedFloatAndPrimitiveFloatAndFloatProvider.get();
    instance.boxedDouble = boxedDoubleAndPrimitiveDoubleAndDoubleProvider.get();
    instance.byteArray = byteArrayProvider.get();
    instance.charArray = charArrayProvider.get();
    instance.shortArray = shortArrayProvider.get();
    instance.intArray = intArrayProvider.get();
    instance.longArray = longArrayProvider.get();
    instance.booleanArray = booleanArrayProvider.get();
    instance.floatArray = floatArrayAndLazyProvider.get();
    instance.doubleArray = doubleArrayProvider.get();
    instance.byteArrayProvider = byteArrayProvider;
    instance.charArrayProvider = charArrayProvider;
    instance.shortArrayProvider = shortArrayProvider;
    instance.intArrayProvider = intArrayProvider;
    instance.longArrayProvider = longArrayProvider;
    instance.booleanArrayProvider = booleanArrayProvider;
    instance.floatArrayProvider = floatArrayAndLazyProvider;
    instance.doubleArrayProvider = doubleArrayProvider;
    instance.lazyByteArray = DoubleCheckLazy.create(byteArrayProvider);
    instance.lazyCharArray = DoubleCheckLazy.create(charArrayProvider);
    instance.lazyShortArray = DoubleCheckLazy.create(shortArrayProvider);
    instance.lazyIntArray = DoubleCheckLazy.create(intArrayProvider);
    instance.lazyLongArray = DoubleCheckLazy.create(longArrayProvider);
    instance.lazyBooleanArray = DoubleCheckLazy.create(booleanArrayProvider);
    instance.lazy = DoubleCheckLazy.create(floatArrayAndLazyProvider);
    instance.lazyDoubleArray = DoubleCheckLazy.create(doubleArrayProvider);
    instance.thing = thingProvider.get();
    instance.thingProvider = thingProvider;
    instance.lazyThing = DoubleCheckLazy.create(thingProvider);
    instance.thingMembersInjector = thingMembersInjector;
    instance.primitiveByte(boxedBypeAndPrimitiveByteAndByteProvider.get());
    instance.primitiveChar(boxedCharAndPrimitiveCharAndCharProvider.get());
    instance.primitiveShort(boxedShortAndPrimitiveShortAndShortProvider.get());
    instance.primitiveInt(boxedIntAndPrimitiveIntAndIntProvider.get());
    instance.primitiveLong(boxedLongAndPrimitiveLongAndLongProvider.get());
    instance.primitiveBoolean(boxedBooleanAndPrimitiveBooleanAndBooleanProvider.get());
    instance.primitiveFloat(boxedFloatAndPrimitiveFloatAndFloatProvider.get());
    instance.primitiveDouble(boxedDoubleAndPrimitiveDoubleAndDoubleProvider.get());
    instance.byteProvider(boxedBypeAndPrimitiveByteAndByteProvider);
    instance.charProvider(boxedCharAndPrimitiveCharAndCharProvider);
    instance.shortProvider(boxedShortAndPrimitiveShortAndShortProvider);
    instance.intProvider(boxedIntAndPrimitiveIntAndIntProvider);
    instance.longProvider(boxedLongAndPrimitiveLongAndLongProvider);
    instance.booleanProvider(boxedBooleanAndPrimitiveBooleanAndBooleanProvider);
    instance.floatProvider(boxedFloatAndPrimitiveFloatAndFloatProvider);
    instance.doubleProvider(boxedDoubleAndPrimitiveDoubleAndDoubleProvider);
    instance.lazyByte(DoubleCheckLazy.create(boxedBypeAndPrimitiveByteAndByteProvider));
    instance.lazyChar(DoubleCheckLazy.create(boxedCharAndPrimitiveCharAndCharProvider));
    instance.lazyShort(DoubleCheckLazy.create(boxedShortAndPrimitiveShortAndShortProvider));
    instance.lazyInt(DoubleCheckLazy.create(boxedIntAndPrimitiveIntAndIntProvider));
    instance.lazyLong(DoubleCheckLazy.create(boxedLongAndPrimitiveLongAndLongProvider));
    instance.lazyBoolean(DoubleCheckLazy.create(boxedBooleanAndPrimitiveBooleanAndBooleanProvider));
    instance.lazyFloat(DoubleCheckLazy.create(boxedFloatAndPrimitiveFloatAndFloatProvider));
    instance.lazyDouble(DoubleCheckLazy.create(boxedDoubleAndPrimitiveDoubleAndDoubleProvider));
    instance.boxedBype(boxedBypeAndPrimitiveByteAndByteProvider.get());
    instance.boxedChar(boxedCharAndPrimitiveCharAndCharProvider.get());
    instance.boxedShort(boxedShortAndPrimitiveShortAndShortProvider.get());
    instance.boxedInt(boxedIntAndPrimitiveIntAndIntProvider.get());
    instance.boxedLong(boxedLongAndPrimitiveLongAndLongProvider.get());
    instance.boxedBoolean(boxedBooleanAndPrimitiveBooleanAndBooleanProvider.get());
    instance.boxedFloat(boxedFloatAndPrimitiveFloatAndFloatProvider.get());
    instance.boxedDouble(boxedDoubleAndPrimitiveDoubleAndDoubleProvider.get());
    instance.byteArray(byteArrayProvider.get());
    instance.charArray(charArrayProvider.get());
    instance.shortArray(shortArrayProvider.get());
    instance.intArray(intArrayProvider.get());
    instance.longArray(longArrayProvider.get());
    instance.booleanArray(booleanArrayProvider.get());
    instance.floatArray(floatArrayAndLazyProvider.get());
    instance.doubleArray(doubleArrayProvider.get());
    instance.byteArrayProvider(byteArrayProvider);
    instance.charArrayProvider(charArrayProvider);
    instance.shortArrayProvider(shortArrayProvider);
    instance.intArrayProvider(intArrayProvider);
    instance.longArrayProvider(longArrayProvider);
    instance.booleanArrayProvider(booleanArrayProvider);
    instance.floatArrayProvider(floatArrayAndLazyProvider);
    instance.doubleArrayProvider(doubleArrayProvider);
    instance.lazyByteArray(DoubleCheckLazy.create(byteArrayProvider));
    instance.lazyCharArray(DoubleCheckLazy.create(charArrayProvider));
    instance.lazyShortArray(DoubleCheckLazy.create(shortArrayProvider));
    instance.lazyIntArray(DoubleCheckLazy.create(intArrayProvider));
    instance.lazyLongArray(DoubleCheckLazy.create(longArrayProvider));
    instance.lazyBooleanArray(DoubleCheckLazy.create(booleanArrayProvider));
    instance.lazy(DoubleCheckLazy.create(floatArrayAndLazyProvider));
    instance.lazyDoubleArray(DoubleCheckLazy.create(doubleArrayProvider));
    instance.thing(thingProvider.get());
    instance.thingProvider(thingProvider);
    instance.lazyThing(DoubleCheckLazy.create(thingProvider));
    instance.thingMembersInjector(thingMembersInjector);
  }

  public static MembersInjector<InjectedThing> create(Provider<Byte> boxedBypeAndPrimitiveByteAndByteProvider, Provider<Character> boxedCharAndPrimitiveCharAndCharProvider, Provider<Short> boxedShortAndPrimitiveShortAndShortProvider, Provider<Integer> boxedIntAndPrimitiveIntAndIntProvider, Provider<Long> boxedLongAndPrimitiveLongAndLongProvider, Provider<Boolean> boxedBooleanAndPrimitiveBooleanAndBooleanProvider, Provider<Float> boxedFloatAndPrimitiveFloatAndFloatProvider, Provider<Double> boxedDoubleAndPrimitiveDoubleAndDoubleProvider, Provider<byte[]> byteArrayProvider, Provider<char[]> charArrayProvider, Provider<short[]> shortArrayProvider, Provider<int[]> intArrayProvider, Provider<long[]> longArrayProvider, Provider<boolean[]> booleanArrayProvider, Provider<float[]> floatArrayAndLazyProvider, Provider<double[]> doubleArrayProvider, Provider<Thing> thingProvider, MembersInjector<Thing> thingMembersInjector) {  
      return new InjectedThing_MembersInjector(boxedBypeAndPrimitiveByteAndByteProvider, boxedCharAndPrimitiveCharAndCharProvider, boxedShortAndPrimitiveShortAndShortProvider, boxedIntAndPrimitiveIntAndIntProvider, boxedLongAndPrimitiveLongAndLongProvider, boxedBooleanAndPrimitiveBooleanAndBooleanProvider, boxedFloatAndPrimitiveFloatAndFloatProvider, boxedDoubleAndPrimitiveDoubleAndDoubleProvider, byteArrayProvider, charArrayProvider, shortArrayProvider, intArrayProvider, longArrayProvider, booleanArrayProvider, floatArrayAndLazyProvider, doubleArrayProvider, thingProvider, thingMembersInjector);
  }
}

